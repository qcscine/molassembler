/*!@file
 * @copyright This code is licensed under the 3-clause BSD license.
 *   Copyright ETH Zurich, Department of Chemistry and Applied Biosciences, Reiher Group.
 *   See LICENSE.txt for details.
 */
#include "TypeCasters.h"
#include "pybind11/eigen.h"

#include "Molassembler/Shapes/Data.h"
#include "Molassembler/Shapes/ContinuousMeasures.h"

void init_shape_submodule(pybind11::module& m) {
  using namespace Scine::Molassembler;

  auto shapeSubmodule = m.def_submodule("shapes");
  shapeSubmodule.doc() = R"(Shape submodule)";

  pybind11::enum_<Shapes::Shape> shapeEnum(
    shapeSubmodule,
    "Shape",
    R"delim(
      Enumeration of recognizable polyhedral shapes

      >>> all_shapes = shapes.Shape.__members__.values() # Full list of shapes
      >>> shapes.Shape.SquareAntiprism in all_shapes
      True
      >>> shapes.Shape.__members__["TrigonalPrism"] # String lookup by enum name
      <Shape.TrigonalPrism: 13>
      >>> str(shapes.Shape.TrigonalPrism) # displayable string
      'trigonal prism'
    )delim",
    pybind11::arithmetic()
  );

  shapeEnum.value("Line", Shapes::Shape::Line)
    .value("Bent", Shapes::Shape::Bent)
    .value("EquilateralTriangle", Shapes::Shape::EquilateralTriangle)
    .value("VacantTetrahedron", Shapes::Shape::VacantTetrahedron)
    .value("T", Shapes::Shape::T)
    .value("Tetrahedron", Shapes::Shape::Tetrahedron)
    .value("Square", Shapes::Shape::Square)
    .value("Seesaw", Shapes::Shape::Seesaw)
    .value("TrigonalPyramid", Shapes::Shape::TrigonalPyramid)
    .value("SquarePyramid", Shapes::Shape::SquarePyramid)
    .value("TrigonalBipyramid", Shapes::Shape::TrigonalBipyramid)
    .value("Pentagon", Shapes::Shape::Pentagon)
    .value("Octahedron", Shapes::Shape::Octahedron)
    .value("TrigonalPrism", Shapes::Shape::TrigonalPrism)
    .value("PentagonalPyramid", Shapes::Shape::PentagonalPyramid)
    .value("Hexagon", Shapes::Shape::Hexagon)
    .value("PentagonalBipyramid", Shapes::Shape::PentagonalBipyramid)
    .value("CappedOctahedron", Shapes::Shape::CappedOctahedron)
    .value("CappedTrigonalPrism", Shapes::Shape::CappedTrigonalPrism)
    .value("SquareAntiprism", Shapes::Shape::SquareAntiprism)
    .value("Cube", Shapes::Shape::Cube)
    .value("TrigonalDodecahedron", Shapes::Shape::TrigonalDodecahedron)
    .value("HexagonalBipyramid", Shapes::Shape::HexagonalBipyramid)
    .value("TricappedTrigonalPrism", Shapes::Shape::TricappedTrigonalPrism)
    .value("CappedSquareAntiprism", Shapes::Shape::CappedSquareAntiprism)
    .value("HeptagonalBipyramid", Shapes::Shape::HeptagonalBipyramid)
    .value("BicappedSquareAntiprism", Shapes::Shape::BicappedSquareAntiprism)
    .value("EdgeContractedIcosahedron", Shapes::Shape::EdgeContractedIcosahedron)
    .value("Icosahedron", Shapes::Shape::Icosahedron)
    .value("Cuboctahedron", Shapes::Shape::Cuboctahedron);

  shapeEnum.def("__str__", &Shapes::name, pybind11::prepend());

  shapeSubmodule.def(
    "name_from_str",
    &Shapes::nameFromString,
    pybind11::arg("name_str"),
    R"delim(
      Fetch a shape name from its string representation. Case and
      whitespace-sensitive.

      >>> s = shapes.Shape.CappedSquareAntiprism
      >>> str(s)
      'capped square antiprism'
      >>> shapes.name_from_str(str(s)) == s
      True
    )delim"
  );

  shapeSubmodule.def(
    "size",
    &Shapes::size,
    pybind11::arg("shape"),
    R"delim(
      Number of vertices of a shape. Does not include a centroid.

      >>> shapes.size(shapes.Shape.Line)
      2
      >>> shapes.size(shapes.Shape.Octahedron)
      6
      >>> shapes.size(shapes.Shape.Cuboctahedron)
      12
    )delim"
  );

  shapeSubmodule.def(
    "coordinates",
    &Shapes::coordinates,
    pybind11::arg("shape"),
    "Idealized spherical coordinates of the shape"
  );

  auto continuousSubmodule = shapeSubmodule.def_submodule("continuous");
  continuousSubmodule.doc() = R"delim(
    Calculation of continuous shape or symmetry measures
  )delim";

  continuousSubmodule.def(
    "normalize",
    &Shapes::Continuous::normalize,
    pybind11::arg("positions"),
    "Normalizes positions for continuous measure analyses"
  );

  continuousSubmodule.def(
    "shape_centroid_last",
    [](
      const Shapes::Continuous::PositionCollection& normalizedPositions,
      const Shapes::Shape shape
    ) -> double {
      return Shapes::Continuous::shapeCentroidLast(normalizedPositions, shape).measure;
    },
    pybind11::arg("normalized_positions"),
    pybind11::arg("shape"),
    "Calculates shape measure with centroid pre-matched, last in normalized positions"
  );

  continuousSubmodule.def(
    "probability_random_cloud",
    &Shapes::Continuous::probabilityRandomCloud,
    pybind11::arg("measure"),
    pybind11::arg("shape"),
    R"delim(
      Probability that shape measure in set of measures for random point clouds

      The random point clouds are generated by a zero vector representing the
      centroid, and points of uniformly distributed direction and normally
      distributed (mu = 1, stddev = 0.2) length.

      A beta distribution is fitted against two hundred such continuous shape
      measures with respect to the chosen shape.

      The probability is then the cumulative distribution function value of the
      passed measure in the fitted beta distribution.

      The distribution parameters for N = 200 random point clouds are
      precomputed for shapes of sizes <= 8 and hardcoded into the binary. If no
      beta distribution parameters are available for a shape, returns None.

      :param measure: Continuous shape measure for a particular shape
      :param shape: The shape for which the measure was calculated

      :returns: Option[float]
    )delim"
  );

  continuousSubmodule.def(
    "cloud_distribution",
    &Shapes::Continuous::randomCloudDistributionParameters,
    pybind11::arg("shape"),
    pybind11::arg("N"),
    pybind11::arg("seed"),
    R"delim(
      Generate beta distribution parameters for shape measures of random point clouds

      The random point clouds are generated by a zero vector representing the
      centroid, and points of uniformly distributed direction and normally
      distributed (mu = 1, stddev = 0.2) length.

      A beta distribution is fitted against two hundred such continuous shape
      measures with respect to the chosen shape.

      :param shape: Shape for which to calculate distribution parameters
      :param N: Number of samples
      :param seed: Seed for PRNG

      :returns: list with a, b, loc and scale parameters
    )delim"
  );
}
