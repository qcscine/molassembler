import setuptools
from typing import Dict, List
from pathlib import Path
import os

markdown_description = """
# Molassembler library
## Overview

Molassembler is a C++ library that aims to facilitate crossings between
Cartesian and graph representations of molecules. It provides the necessary
functionality to represent a molecule as a graph, modify it in graph space, and
generate coordinates from graphs. It can capture the absolute configuration
of multidentate and haptic inorganic molecules from positional data and
generate non-superposable stereopermutations as output.
"""

filelist = ["__init__.py", "scine_molassembler.*"@molassembler_PY_DEPS@]


class EmptyListWithLength(list):
    """ Makes the wheel a binary distribution and platlib compliant. """

    def __len__(self):
        return 1


def find_stubs(package_name: str) -> List[str]:
    """ Find typing stub files in the package directory """
    stubs = []
    for root, dirs, files in os.walk(package_name):
        for file in files:
            if not file.endswith(".pyi"):
                continue

            path = os.path.join(root, file)
            stubs.append(path.replace(package_name + os.sep, '', 1))
    return stubs


def collect_data(pkg_name: str) -> Dict[str, List[str]]:
    """ Generates the package_data dict with stubs (if present) """
    package_data = {pkg_name: filelist}

    # Handle possibility of typing stubs present
    stubs = find_stubs(pkg_name)
    if len(stubs) > 0:
        # Typing marker file for PEP 561
        typed_filename = "py.typed"
        typed_file = Path(".") / pkg_name / typed_filename
        typed_file.touch()
        package_data[pkg_name].extend(stubs)
        package_data[pkg_name].append(typed_filename)

    return package_data


# Define the setup
setuptools.setup(
    name="scine_molassembler",
    version="@Molassembler_VERSION@",
    author="ETH Zurich, Department of Chemistry and Applied Biosciences, Reiher Group",
    author_email="scine@phys.chem.ethz.ch",
    description="Inorganic molecular graph interpretation, modification and conformer generation",
    long_description=markdown_description,
    long_description_content_type="text/markdown",
    url="https://scine.ethz.ch/download/molassembler",
    packages=["scine_molassembler"],
    package_data=collect_data("scine_molassembler"),
    classifiers=[
        "Programming Language :: Python :: 3",
        "Programming Language :: C++",
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: BSD License",
        "Natural Language :: English",
        "Topic :: Scientific/Engineering :: Chemistry"
    ],
    zip_safe=False,
    install_requires=["scine_utilities"],
    test_suite="pytest",
    tests_require=["pytest"],
    ext_modules=EmptyListWithLength()
)
